# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FeverTracker.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtGui import *
from PyQt5.QtCore import *

from PyQt5.QtWidgets import QWidget


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from mask_detector import face_mask_detector


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setWindowIcon(QtGui.QIcon('7143016.png'))
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(700, 707)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setAccessibleName("")
        self.centralwidget.setObjectName("centralwidget")

        self.camera = QtWidgets.QLabel(self.centralwidget)
        self.camera.setGeometry(QtCore.QRect(20, 10, 651, 591))
        self.camera.setObjectName("camera")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(50, 620, 261, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(380, 620, 271, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setDisabled(True)


        MainWindow.setCentralWidget(self.centralwidget)


        ## Instantiation d'un nouveau Thread 
        self.Worker1 = Worker1()
        # l'execution de ce thread qui provoque l'execution de la cam

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def start_cam(self):
        self.pushButton_3.setDisabled(False) # disable start button
        self.pushButton.setDisabled(True) # enable stop button
        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)

    def stop_cam(self):
        self.pushButton_3.setDisabled(True) # disable stop button
        self.pushButton.setDisabled(False) # enable start button
        self.Worker1.ImageUpdate.disconnect()
        self.camera.setPixmap(QtGui.QPixmap())
        self.Worker1.stop()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mask detector"))
        self.pushButton.setText(_translate("MainWindow", "Start"))
        self.pushButton_3.setText(_translate("MainWindow", "Stop"))
        self.pushButton.clicked.connect(self.start_cam)
        self.pushButton_3.clicked.connect(self.stop_cam)

    def ImageUpdateSlot(self, Image):
        self.camera.setPixmap(QPixmap.fromImage(Image))



class Worker1(QThread):
    ImageUpdate = pyqtSignal(QImage)
    # add your code here
    def run(self):
        self.ThreadActive = True
        Capture = cv2.VideoCapture(0)

        while True:
            if (not self.ThreadActive):
                break
            ret, frame = Capture.read()
            if not ret:
                break

            output = face_mask_detector(frame)
            output = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)
            ConvertToQtFormat = QImage(output.data, output.shape[1], output.shape[0], QImage.Format_RGB888)
            self.ImageUpdate.emit(ConvertToQtFormat)

        Capture.release()

    # Fonction termine l'execution du thread (cam√©ra s'eteint)
    def stop(self):
        self.ThreadActive = False


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
